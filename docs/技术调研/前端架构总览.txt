# BongoPet 前端架构总览

## 技术栈概述

### 核心框架
- **Vue 3.5.16**: 采用 Composition API 和 `<script setup>` 语法
- **TypeScript**: 全面的类型支持
- **Vite**: 现代化构建工具，支持热重载和快速构建
- **Vue Router 4.5.1**: 单页面应用路由管理
- **Pinia 3.0.3**: 现代化状态管理库

### UI 框架与样式
- **Ant Design Vue 4.2.6**: 企业级 UI 组件库
- **UnoCSS**: 原子化 CSS 引擎，提供高性能样式解决方案
- **SCSS**: CSS 预处理器
- **@ant-design/icons-vue**: 图标库

### Tauri 集成
- **@tauri-apps/api 2.5.0**: Tauri 核心 API
- **@tauri-store/pinia 3.7.0**: Pinia 与 Tauri 的状态持久化插件
- **多个 Tauri 插件**: 系统集成功能
  - `plugin-autostart`: 开机自启
  - `plugin-clipboard-manager`: 剪贴板管理
  - `plugin-dialog`: 系统对话框
  - `plugin-fs`: 文件系统操作
  - `plugin-global-shortcut`: 全局快捷键
  - `plugin-log`: 日志记录
  - `plugin-opener`: 打开外部链接
  - `plugin-os`: 操作系统信息
  - `plugin-process`: 进程管理
  - `plugin-updater`: 应用更新

### Live2D 集成
- **pixi-live2d-display 0.4.0**: Live2D 模型渲染库
- **pixi.js 6.5.10**: 2D 渲染引擎
- **live2d.min.js**: Live2D 核心库
- **live2dcubismcore.min.js**: Live2D Cubism 核心

### 工具库
- **@vueuse/core 13.3.0**: Vue 组合式函数工具集
- **dayjs 1.11.13**: 轻量级日期处理库
- **es-toolkit 1.38.0**: 现代化 JavaScript 工具库
- **nanoid 5.1.5**: 唯一 ID 生成器
- **is-url 1.2.4**: URL 验证工具

## 项目结构分析

### 目录结构
```
src/
├── main.ts                 # 应用入口文件
├── App.vue                 # 根组件
├── vite-env.d.ts          # Vite 类型声明
├── assets/                 # 静态资源
│   └── css/               # 样式文件
├── components/            # 可复用组件
│   ├── pro-list/          # 专业列表组件
│   ├── pro-list-item/     # 列表项组件
│   ├── pro-shortcut/      # 快捷键组件
│   └── update-app/        # 应用更新组件
├── composables/           # 组合式函数
├── constants/             # 常量定义
├── pages/                 # 页面组件
│   ├── main/              # 主窗口页面
│   └── preference/        # 设置页面
├── plugins/               # 插件模块
├── router/                # 路由配置
├── stores/                # 状态管理
├── utils/                 # 工具函数
```

## 核心架构设计

### 1. 应用入口 (main.ts)

```typescript
import { createPlugin } from '@tauri-store/pinia'
import { createPinia } from 'pinia'
import { createApp } from 'vue'

import App from './App.vue'
import router from './router'
import 'virtual:uno.css'
import 'ant-design-vue/dist/reset.css'
import './assets/css/global.scss'

const pinia = createPinia()
pinia.use(createPlugin({ saveOnChange: true }))

createApp(App).use(router).use(pinia).mount('#app')
```

**关键特性**:
- **Pinia 状态持久化**: 通过 `@tauri-store/pinia` 实现状态自动保存
- **样式加载顺序**: UnoCSS → Ant Design → 全局样式
- **插件注册**: 路由和状态管理插件注册

### 2. 根组件 (App.vue)

**核心功能**:
- **多 Store 初始化**: 统一管理所有 Pinia store 的启动和初始化
- **窗口状态管理**: 处理窗口显示/隐藏事件
- **主题系统**: 集成 Ant Design 的明暗主题切换
- **全局事件处理**: 未捕获异常和链接点击事件
- **国际化配置**: 中文本地化支持

**初始化流程**:
```typescript
onMounted(async () => {
  generateColorVars()           // 生成主题色彩变量
  await appStore.$tauri.start() // 启动应用 store
  await appStore.init()         // 初始化应用状态
  await modelStore.$tauri.start() // 启动模型 store
  await modelStore.init()       // 初始化模型
  await catStore.$tauri.start() // 启动猫咪 store
  await generalStore.$tauri.start() // 启动通用设置 store
  await shortcutStore.$tauri.start() // 启动快捷键 store
  await restoreState()          // 恢复窗口状态
  catStore.init()              // 初始化猫咪状态
})
```

### 3. 路由系统 (router/index.ts)

**路由配置**:
- **Hash 模式**: 使用 `createWebHashHistory()` 适配桌面应用
- **简洁路由**: 仅两个主要页面
  - `/`: 主窗口 (Live2D 显示)
  - `/preference`: 设置窗口

### 4. 构建配置

#### Vite 配置 (vite.config.ts)
- **固定端口**: 1420 (Tauri 要求)
- **HMR 配置**: 支持热模块替换
- **路径别名**: `@` 指向 `src` 目录
- **Tauri 优化**: 忽略 `src-tauri` 目录监听

#### UnoCSS 配置 (uno.config.ts)
- **预设**: Wind3 + Icons
- **变换器**: 指令和变体组支持
- **主题集成**: 与 Ant Design 主题变量绑定
- **快捷方式**: 简化常用样式类名

## 架构特点

### 1. 模块化设计
- **职责分离**: 页面、组件、逻辑、状态各司其职
- **可复用性**: 组合式函数和组件的高度复用
- **类型安全**: 全面的 TypeScript 类型支持

### 2. 状态管理策略
- **分模块管理**: 按功能域划分不同的 store
- **持久化**: 自动保存状态到本地存储
- **响应式**: 基于 Vue 3 的响应式系统

### 3. 跨平台集成
- **Tauri 深度集成**: 充分利用 Tauri 的系统能力
- **原生体验**: 系统托盘、全局快捷键、文件操作等
- **性能优化**: Rust 后端 + Web 前端的混合架构

### 4. 开发体验
- **热重载**: Vite 提供快速的开发反馈
- **类型提示**: 完整的 TypeScript 支持
- **代码规范**: ESLint 和 Git hooks 保证代码质量

## 技术亮点

1. **现代化技术栈**: Vue 3 + Composition API + TypeScript
2. **原子化 CSS**: UnoCSS 提供高性能样式解决方案
3. **状态持久化**: 无缝的桌面应用状态管理
4. **Live2D 集成**: 专业的 2D 动画渲染
5. **跨平台能力**: 一套代码支持多平台桌面应用

## 开发工作流

1. **开发启动**: `pnpm run dev` (构建图标 + 启动 Vite)
2. **构建**: `pnpm run build` (构建所有资源)
3. **Tauri 开发**: `pnpm run tauri dev` (启动完整应用)
4. **代码检查**: `pnpm run lint` (ESLint 检查和修复)

这个架构为 BongoPet 提供了坚实的技术基础，支持复杂的桌面应用功能同时保持良好的开发体验和代码可维护性。