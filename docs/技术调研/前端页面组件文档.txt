# 前端页面组件文档

## 概述

BongoPet 前端采用 Vue 3 + TypeScript 构建，主要包含两个核心页面：主窗口（Main）和设置页面（Preference）。页面组件采用组合式 API 设计，结合 Pinia 状态管理和 Tauri 原生能力。

## 页面结构

```
src/pages/
├── main/
│   └── index.vue          # 主窗口页面
└── preference/
    ├── index.vue           # 设置页面主体
    └── components/         # 设置页面子组件
        ├── about/          # 关于页面
        ├── cat/            # 猫咪设置
        ├── general/        # 通用设置
        ├── model/          # 模型管理
        └── shortcut/       # 快捷键设置
```

## 主窗口页面 (Main)

### 文件位置
`src/pages/main/index.vue`

### 核心功能

#### 1. Live2D 模型渲染
- **Canvas 渲染**: 使用 `<canvas id="live2dCanvas" />` 作为 Live2D 模型渲染容器
- **模型加载**: 通过 `useModel` 组合式函数管理模型加载和渲染
- **动态交互**: 支持鼠标跟随、按键响应等交互效果

#### 2. 窗口交互管理
```typescript
// 窗口拖拽
function handleMouseDown() {
  appWindow.startDragging()
}

// 右键菜单
async function handleContextmenu(event: MouseEvent) {
  event.preventDefault()
  if (event.shiftKey) return
  
  const menu = await Menu.new({
    items: await getSharedMenu(),
  })
  menu.popup()
}

// 缩放控制
function handleMouseMove(event: MouseEvent) {
  const { buttons, shiftKey, movementX, movementY } = event
  if (buttons !== 2 || !shiftKey) return
  
  const delta = (movementX + movementY) * 0.5
  const nextScale = Math.max(10, Math.min(catStore.scale + delta, 500))
  catStore.scale = round(nextScale)
}
```

#### 3. 状态响应式管理
```typescript
// 监听猫咪可见性
watch(() => catStore.visible, async (value) => {
  value ? showWindow() : hideWindow()
})

// 监听窗口穿透
watch(() => catStore.penetrable, (value) => {
  appWindow.setIgnoreCursorEvents(value)
}, { immediate: true })

// 监听置顶状态
watch(() => catStore.alwaysOnTop, setAlwaysOnTop, { immediate: true })
```

#### 4. 设备输入处理
- **键盘监听**: 通过 `useDevice` 处理键盘按键事件
- **游戏手柄支持**: 监听手柄按键和摇杆输入
- **按键可视化**: 显示当前按下的按键图片

#### 5. 视觉效果
- **镜像模式**: 支持水平翻转显示
- **透明度控制**: 动态调整窗口透明度
- **背景图片**: 支持自定义背景图片显示
- **重绘提示**: 模型加载时显示"重绘中..."提示

### 技术特点

1. **响应式设计**: 使用 Vue 3 响应式系统实现状态同步
2. **原生集成**: 深度集成 Tauri 窗口管理 API
3. **性能优化**: 合理使用 watch 和 immediate 选项
4. **用户体验**: 支持拖拽、缩放、右键菜单等交互

## 设置页面 (Preference)

### 文件位置
`src/pages/preference/index.vue`

### 页面结构

设置页面采用侧边栏导航 + 内容区域的布局：

```typescript
const menus = [
  { key: 'general', label: '通用', icon: 'i-tabler-settings' },
  { key: 'cat', label: '猫咪', icon: 'i-tabler-cat' },
  { key: 'model', label: '模型', icon: 'i-tabler-box-model-2' },
  { key: 'shortcut', label: '快捷键', icon: 'i-tabler-keyboard' },
  { key: 'about', label: '关于', icon: 'i-tabler-info-circle' },
]
```

### 子组件详解

#### 1. 通用设置 (General)
**文件**: `src/pages/preference/components/general/index.vue`

**功能**:
- **开机自启动**: 使用 `@tauri-apps/plugin-autostart` 管理
- **任务栏图标**: 控制窗口在任务栏的显示
- **主题模式**: 支持亮色/暗色主题切换
- **自动更新**: 控制应用自动检查更新
- **macOS 权限**: 处理 macOS 系统权限请求

```typescript
watch(() => generalStore.autostart, async (value) => {
  const enabled = await isEnabled()
  if (value && !enabled) {
    return enable()
  }
  if (!value && enabled) {
    disable()
  }
}, { immediate: true })
```

#### 2. 猫咪设置 (Cat)
**文件**: `src/pages/preference/components/cat/index.vue`

**功能**:
- **镜像模式**: 水平翻转模型显示
- **单键模式**: 每只手只显示最后按下的按键
- **鼠标镜像**: 鼠标跟随手部移动
- **窗口穿透**: 窗口不影响其他应用操作
- **窗口置顶**: 始终显示在最上层
- **透明度控制**: 调整窗口透明度
- **缩放控制**: 调整模型显示大小

#### 3. 模型管理 (Model)
**文件**: `src/pages/preference/components/model/index.vue`

**功能**:
- **模型展示**: 瀑布流布局展示所有模型
- **模型上传**: 支持拖拽上传新模型
- **模型切换**: 点击切换当前使用的模型
- **模型删除**: 支持删除不需要的模型
- **封面预览**: 显示模型封面图片

```typescript
async function handleDelete(item: Model) {
  const { id, path } = item
  try {
    await remove(path, { recursive: true })
    message.success('删除成功')
  } catch (error) {
    message.error(String(error))
  } finally {
    modelStore.models = modelStore.models.filter(item => item.id !== id)
    if (id === modelStore.currentModel?.id) {
      modelStore.currentModel = modelStore.models[0]
    }
  }
}
```

#### 4. 快捷键设置 (Shortcut)
**文件**: `src/pages/preference/components/shortcut/index.vue`

**功能**:
- **全局快捷键**: 使用 `useTauriShortcut` 注册系统级快捷键
- **功能绑定**: 支持切换窗口、镜像模式、穿透等功能
- **快捷键冲突检测**: 防止快捷键冲突

```typescript
useTauriShortcut(visibleCat, () => {
  catStore.visible = !catStore.visible
})

useTauriShortcut(visiblePreference, () => {
  toggleWindowVisible('preference')
})
```

#### 5. 关于页面 (About)
**文件**: `src/pages/preference/components/about/index.vue`

**功能**:
- **版本信息**: 显示应用和 Tauri 版本
- **系统信息**: 显示平台和架构信息
- **更新检查**: 手动检查应用更新
- **问题反馈**: 跳转到 GitHub Issues
- **日志管理**: 打开日志目录
- **信息复制**: 一键复制系统信息用于问题报告

## 组件设计模式

### 1. 组合式 API 模式
所有组件都使用 Vue 3 组合式 API，提供更好的类型推导和逻辑复用。

### 2. 状态管理集成
组件通过 Pinia store 管理状态，实现跨组件数据共享。

### 3. Tauri 原生集成
深度集成 Tauri API，实现桌面应用特有功能。

### 4. 响应式设计
使用 Vue 响应式系统实现 UI 与状态的自动同步。

## 技术亮点

1. **双窗口架构**: 主窗口和设置窗口独立管理
2. **原生体验**: 深度集成系统 API 提供原生体验
3. **实时响应**: 设置更改实时生效
4. **用户友好**: 丰富的交互反馈和错误处理
5. **模块化设计**: 组件职责清晰，易于维护扩展

## 开发建议

1. **状态管理**: 新功能优先考虑在对应的 store 中添加状态
2. **组件拆分**: 复杂功能应拆分为独立的子组件
3. **错误处理**: 所有异步操作都应包含错误处理
4. **类型安全**: 充分利用 TypeScript 类型系统
5. **性能优化**: 合理使用 watch 的 immediate 和 deep 选项