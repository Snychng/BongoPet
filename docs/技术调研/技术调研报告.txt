BongoPet 项目实现逻辑详解
项目概述
BongoPet 是一个基于 Tauri + Vue 3 + TypeScript 开发的桌面宠物应用，集成了 Live2D 模型渲染、设备输入监听、游戏手柄支持等功能。
技术栈
- 前端: Vue 3 + TypeScript + Vite + UnoCSS + Pinia
- 后端: Rust + Tauri
- Live2D: Live2D Cubism SDK
- 设备监听: rdev (键鼠) + gilrs (游戏手柄)
- UI框架: Naive UI
项目架构
整体结构
BongoPet/
├── src/                    # 前端 Vue 应用
│   ├── pages/             # 页面组件
│   │   ├── main/          # 主窗口页面
│   │   └── preference/    # 设置窗口页面
│   ├── stores/            # Pinia 状态管理
│   ├── composables/       # 组合式函数
│   ├── components/        # 可复用组件
│   └── utils/             # 工具函数
└── src-tauri/             # Rust 后端
    ├── src/core/          # 核心功能模块
    │   ├── device.rs      # 设备监听
    │   ├── gamepad.rs     # 游戏手柄
    │   └── setup/         # 平台相关设置
    └── src/plugins/       # Tauri 插件
核心功能模块
1. 双窗口架构
- 主窗口 (main): 显示 Live2D 模型，透明背景，置顶显示
- 设置窗口 (preference): 配置界面，包含模型选择、快捷键设置等
2. Live2D 模型系统
核心文件: `src/utils/live2d.ts`
- 模型加载与渲染
- 动画播放控制
- 表情切换
- 物理效果模拟
- 鼠标交互响应
状态管理: `src/stores/model.ts`
- 模型列表管理
- 当前模型状态
- 动画队列控制
3. 设备输入监听系统
Rust 后端:
- src-tauri/src/core/device.rs: 键鼠事件监听
- src-tauri/src/core/gamepad.rs: 游戏手柄事件监听
前端处理:
- src/composables/useDevice.ts: 设备事件处理
- src/composables/useGamepad.ts: 游戏手柄事件处理
事件流程:
1. Rust 后端通过 rdev/gilrs 监听硬件事件
2. 事件通过 Tauri 的 emit 发送到前端
3. 前端组合式函数接收并处理事件
4. 触发对应的 Live2D 动画或状态变化
4. 状态管理系统 (Pinia)
- src/stores/cat.ts: 猫咪状态管理
- src/stores/model.ts: 模型管理
- src/stores/app.ts: 应用全局状态
- src/stores/general.ts: 通用设置
- src/stores/shortcut.ts: 快捷键配置
5. 快捷键系统
实现文件:
- src/composables/useTauriShortcut.ts: 全局快捷键注册
- src/utils/keyboard.ts: 键盘事件处理工具
6. 系统托盘
实现文件: `src/composables/useTray.ts`
- 托盘图标显示
- 右键菜单
- 窗口显示/隐藏控制
数据流向
硬件输入 → Rust监听 → Tauri事件 → Vue组合式函数 → Pinia状态 → Live2D渲染
关键文件说明
前端核心文件
1. **`src/App.vue`**: 应用入口，初始化各种监听器
2. **`src/pages/main/index.vue`**: 主窗口页面，Live2D 模型显示
3. **`src/composables/useModel.ts`**: Live2D 模型控制逻辑
4. **`src/utils/live2d.ts`**: Live2D 核心渲染引擎
后端核心文件
1. **`src-tauri/src/lib.rs`**: Tauri 应用配置和插件注册
2. **`src-tauri/src/core/device.rs`**: 设备事件监听实现
3. **`src-tauri/src/core/gamepad.rs`**: 游戏手柄支持
新功能开发指南
如何添加局域网联机多人对话功能
1. 技术选型
推荐方案:
- WebRTC: 点对点通信，低延迟
- WebSocket: 信令服务器，房间管理
- 或使用现成方案: Socket.IO + 简单的信令服务器
2. 架构设计
客户端A ←→ 信令服务器 ←→ 客户端B
    ↓                      ↓
  WebRTC P2P 直连通信
3. 实现步骤
第一阶段: 基础网络通信
1. 添加网络模块
src/composables/useNetwork.ts     # 网络连接管理
src/stores/network.ts             # 网络状态管理
src/utils/webrtc.ts              # WebRTC 封装
2. Rust 后端支持
src-tauri/src/core/network.rs     # 网络相关 Tauri 命令
3. UI 界面
src/pages/network/                # 联机页面
src/components/chat/              # 聊天组件
第二阶段: 多人交互
1. 消息同步系统
- 用户输入事件广播
- Live2D 动画状态同步
- 聊天消息传输
2. 房间管理
- 创建/加入房间
- 用户列表管理
- 权限控制
第三阶段: 高级功能
1. 语音聊天
- WebRTC 音频流
- 音频可视化
- 推拉说话模式
2. 协同控制
- 多人控制同一个模型
- 投票系统
- 轮流控制
4. 具体实现建议
1. 创建网络状态管理
// src/stores/network.ts
export const useNetworkStore = defineStore('network', () => {
  const isConnected = ref(false)
  const roomId = ref('')
  const users = ref<User[]>([])
  const messages = ref<Message[]>([])
  
  // WebRTC 连接管理
  // 消息发送/接收
  // 房间管理
})
2. 添加网络组合式函数
// src/composables/useNetwork.ts
export function useNetwork() {
  // WebRTC 连接建立
  // 信令处理
  // 数据通道管理
}
3. 扩展 Tauri 命令
// src-tauri/src/core/network.rs
#[tauri::command]
pub async fn create_room() -> Result<String, String> {
    // 创建房间逻辑
}

#[tauri::command]
pub async fn join_room(room_id: String) -> Result<(), String> {
    // 加入房间逻辑
}
4. 消息同步机制
// 监听本地输入事件，广播给其他用户
watch(() => deviceStore.lastKeyEvent, (event) => {
  if (networkStore.isConnected) {
    networkStore.broadcastEvent({
      type: 'device_input',
      data: event,
      userId: networkStore.currentUser.id
    })
  }
})

// 接收其他用户的事件，触发本地动画
networkStore.onMessage((message) => {
  if (message.type === 'device_input') {
    // 触发对应的 Live2D 动画
    modelStore.playAnimation(message.data.animation)
  }
})
5. 开发优先级
1. P0 (核心功能):
- 基础 WebRTC 连接
- 简单文字聊天
- 房间创建/加入
2. P1 (重要功能):
- 输入事件同步
- Live2D 动画同步
- 用户列表显示
3. P2 (增强功能):
- 语音聊天
- 协同控制
- 房间设置
6. 技术难点与解决方案
难点1: NAT 穿透
- 解决方案: 使用 STUN/TURN 服务器
- 推荐服务: Google STUN 或自建 coturn
难点2: 状态同步
- 解决方案: 事件驱动架构 + 状态快照
- 冲突解决: 时间戳 + 优先级机制
难点3: 网络延迟
- 解决方案: 预测性动画 + 延迟补偿
- 优化策略: 本地优先 + 服务器校正
其他功能扩展建议
1. 插件系统: 支持第三方模型和动画
2. 云同步: 设置和模型云端备份
3. AI 对话: 集成 ChatGPT 等 AI 服务
4. 屏幕录制: 录制宠物互动视频
5. 主题系统: 支持自定义 UI 主题
开发环境配置
1. 启动开发服务器: `pnpm run tauri dev`
2. 构建应用: `pnpm run tauri build`
3. 代码检查: `pnpm run lint`
4. 类型检查: `pnpm run type-check`
项目特色
- 🎮 多设备支持: 键盘、鼠标、游戏手柄
- 🎨 Live2D 集成: 流畅的 2D 动画渲染
- 🔧 高度可配置: 丰富的自定义选项
- 🚀 跨平台: Windows、macOS、Linux 支持
- 💡 现代化架构: Vue 3 + Composition API + TypeScript

---
本文档基于当前项目代码分析生成，如有疑问请参考源码实现。